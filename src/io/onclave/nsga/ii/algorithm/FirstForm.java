/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package io.onclave.nsga.ii.algorithm;

import com.file.read.ObjectConstrains;
import com.file.read.PrintingParitofronts;
import com.file.read.WriteToExternalFile;
import de.javasoft.plaf.synthetica.SyntheticaBlackEyeLookAndFeel;
import io.onclave.nsga.ii.api.Service;
import io.onclave.nsga.ii.api.Synthesis;
import io.onclave.nsga.ii.configuration.Configuration;
import io.onclave.nsga.ii.datastructure.Chromosome;
import io.onclave.nsga.ii.datastructure.ParetoObject;
import io.onclave.nsga.ii.datastructure.Population;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.UIManager;

/**
 *
 * @author n9572791
 */
public class FirstForm extends javax.swing.JFrame {

    
    private static String dataLocation = "";
    private int pupulation = 0;
    private int generation = 0;
    private int chromosomeSize = 0;
    private float  crossover_P = 0.0f;
    private float mutation_P = 0.0f;
    /**
     * Creates new form FirstForm
     */
    public FirstForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        loadTablesTextFeild = new javax.swing.JTextField();
        jButton12 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Pupulation Size ");

        jLabel2.setText("Generation Size");

        jLabel3.setText("Mutation Prbability");

        jLabel4.setText("Chromosome Size");

        jLabel5.setText("Crossover Prbability");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Execute");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel7.setText("Select the file with data");

        loadTablesTextFeild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadTablesTextFeildActionPerformed(evt);
            }
        });

        jButton12.setText("Load Table");
        jButton12.setActionCommand("");
        jButton12.setFocusPainted(false);
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12loadTableBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3))
                .addGap(147, 147, 147)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField5)
                    .addComponent(jTextField4)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(jTextField2)
                    .addComponent(jTextField3))
                .addContainerGap(234, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(75, 75, 75))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(loadTablesTextFeild, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                                .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadTablesTextFeild, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton12))
                .addGap(68, 68, 68)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTextField1.getAccessibleContext().setAccessibleName("pupulationTextFeild");
        jTextField2.getAccessibleContext().setAccessibleName("generationText");
        jTextField3.getAccessibleContext().setAccessibleName("chromosomeText");
        jTextField4.getAccessibleContext().setAccessibleName("crossoverText");
        jTextField5.getAccessibleContext().setAccessibleName("mutationText");
        jButton12.getAccessibleContext().setAccessibleName("Load Data");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadTablesTextFeildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadTablesTextFeildActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_loadTablesTextFeildActionPerformed

    private void jButton12loadTableBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12loadTableBtnActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fileChooser.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.out.println("Action");

            }
        });

        int status = fileChooser.showOpenDialog(null);

        if (status == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            dataLocation = file.getAbsolutePath();
            loadTablesTextFeild.setText(dataLocation);
            //System.out.println(file.getAbsolutePath());
        } else if (status == JFileChooser.CANCEL_OPTION) {
            System.out.println("calceled");

        }
    }//GEN-LAST:event_jButton12loadTableBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
       
        
        //This is the text
        pupulation = Integer.parseInt(jTextField1.getText());
        generation = Integer.parseInt(jTextField2.getText());
        chromosomeSize = Integer.parseInt(jTextField3.getText());
        crossover_P = Float.parseFloat(jTextField4.getText());
        mutation_P = Float.parseFloat(jTextField5.getText());
        
        
        
        
        
        //Configuration.buildObjectives("C:\\NSGAIIData\\ClusteringInformation.txt");
        Configuration.buildObjectives(Configuration.readLocation, pupulation, generation, chromosomeSize, crossover_P, mutation_P, dataLocation);
        
        ObjectConstrains con = new ObjectConstrains(Configuration.readLocation);
        /**
         * a new random population is synthesized and sorted using non-dominated population sort to get
         * a sorted list of parent chromosomes at generation 0.
         * child population generated from parent population.
         */
        Population parent = Service.nonDominatedPopulationSort(Synthesis.syntesizePopulation()); 
        Population child = Synthesis.synthesizeChild(parent,con);
        
        /**
         * a loop is run that iterates as new generations are created (new child population is created from previous parent
         * population.
         * the number of generations to be simulated are defined in the Configuration.java file.
         */
        for(int i = 2; i <= Configuration.getGENERATIONS(); i++) {
            
            System.out.println("GENERATION : " + i);
            WriteToExternalFile.writeTextFile(Configuration.writeLocation, "GENERATION : " + i);
            
            /**
             * a combined population of both latest parent and child is created to ensure elitism.
             * the combined population created is then sorted using fast non-dominated sorting algorithm,
             * to create rank wise divisions [chromosomes with rank 1 (non-dominated),
             * chromosomes with rank 2 (dominated by 1 chromosome), etc.]
             * this information is stored in a HashMap data-structure that maps one integer value
             * to one list of chromosomes. The integer refers to the rank number while the list refers
             * to the chromosomes that belong to that rank.
             */
            
            HashMap<Integer, List<Chromosome>> rankedFronts = Service.fastNonDominatedSort(Service.createCombinedPopulation(parent, child));
           
            
            
            Population nextChildPopulation = new Population();
            List<Chromosome> childPopulace = new ArrayList<>();
           
            
            
            /**
             * an iteration is carried over the HashMap to go through each rank of chromosomes, and the
             * most desired chromosomes (higher ranks) are included into the child population of the
             * next generation.
             */
            for(int j = 1; j <= rankedFronts.size(); j++) {
                
                /**
                 * during iteration, the current ranked list of chromosomes is chosen and the amount of
                 * free space (to accommodate chromosomes) of the current child population is calculated
                 * to check whether chromosomes from this rank can be fit into the new child population.
                 */
                List<Chromosome> singularFront = rankedFronts.get(j);
                int usableSpace = Configuration.getPOPULATION_SIZE() - childPopulace.size();
                
                /**
                 * if the new list of chromosomes is not null and if the child population has free usable space,
                 * then an attempt to include some or all of the chromosomes is made otherwise, there is no more
                 * space in the child population and hence no more rank/chromosome checks are done and the program
                 * breaks out from the inner for-loop.
                 */
                if(singularFront != null && !singularFront.isEmpty() && usableSpace > 0) {
                
                    /**
                     * if the amount of usable space is more than or equal to the number of chromosomes in the clot,
                     * the whole clot of chromosomes is added to the child population/populace, otherwise, only the
                     * number of chromosomes that can be fit within the usable space is chosen according to the
                     * crowding distance of the chromosomes.
                     */
                    if(usableSpace >= singularFront.size()) childPopulace.addAll(singularFront);
                    else {
                        
                        /**
                         * a crowd comparison sort is carried over the present clot of chromosomes after assigning them a
                         * crowding distance (to preserve diversity) and hence a list of ParetoObjects are prepared.
                         * [refer ParetoObject.java for more information]
                         */
                        List<ParetoObject> latestFront = Service.crowdComparisonSort(Service.crowdingDistanceAssignment(singularFront));
                        
                        for(int k = 0; k < usableSpace; k++) childPopulace.add(latestFront.get(k).getChromosome());
                    }
                } else break;
            }
            
            /**
             * the new populace is added to the new child population
             */
            nextChildPopulation.setPopulace(childPopulace);
            
            /**
             * if this iteration is not the last generation, the new child created is made the parent for the next
             * generation, and a new child is synthesized from this new parent for the next generation.
             * this is the new parent and child for the next generation.
             * if this is the last generation, no new parent/child combination is created, instead the Pareto Front
             * is plotted and rendered as the latest created child is the actual Pareto Front.
             */
            if(i < Configuration.getGENERATIONS()) {
                if(i%25 == 0){
                    PrintingParitofronts.printParitoFronts(child, i);
                }
                parent = child;
                child = Synthesis.synthesizeChild(nextChildPopulation,con);                
            } else {PrintingParitofronts.printParitoFronts(child,Configuration.getGENERATIONS());}
            
            /**
             * this adds the child of each generation to the plotting to render the front of all the generations.
             */
            
            
        }
                
         SecondFrame ff = new SecondFrame();
         ff.setVisible(true);
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
           try {
            UIManager.setLookAndFeel(new SyntheticaBlackEyeLookAndFeel());
        } catch (Exception e) {
            e.printStackTrace();
        }
        
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(FirstForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(FirstForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(FirstForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(FirstForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FirstForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton12;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField loadTablesTextFeild;
    // End of variables declaration//GEN-END:variables
}
